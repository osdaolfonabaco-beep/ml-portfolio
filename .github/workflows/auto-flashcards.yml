name: Auto Flashcards Generator

on:
  push:
    paths:
      - 'foundations/python_advanced/**.py'
  workflow_dispatch:

jobs:
  generate-flashcards:
    runs-on: ubuntu-latest
    env:
      CI: true

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Debug complete environment
      run: |
        echo "=== üêõ DEBUG START ==="
        echo "Current directory: $(pwd)"
        echo "=== GITHUB WORKSPACE: $GITHUB_WORKSPACE ==="
        echo "=== DIRECTORY STRUCTURE ==="
        ls -la
        echo "=== FOUNDATIONS CONTENT ==="
        ls -la foundations/ && ls -la foundations/python_advanced/
        echo "=== PYTHON VERSION ==="
        python3 --version
        echo "=== PYTHON PATH ==="
        python3 -c "import sys; print('\n'.join(sys.path))"
        echo "=== FILE CONTENT CHECK ==="
        if [ -f "foundations/python_advanced/lista_compras.py" ]; then
          echo "‚úÖ lista_compras.py EXISTS!"
          echo "üìä File size: $(wc -c < foundations/python_advanced/lista_compras.py) bytes"
          echo "üìÑ First 5 lines:"
          head -n 5 foundations/python_advanced/lista_compras.py
        else
          echo "‚ùå lista_compras.py NOT FOUND!"
        fi
        echo "=== üêõ DEBUG END ==="

    - name: Create data directory
      run: mkdir -p data

    - name: Install dependencies
      run: |
        python3 -m pip install --upgrade pip

    - name: Run flashcard generator with extreme debugging
      run: |
        echo "=== üöÄ RUNNING FLASHCARD GENERATOR ==="
        
        # Set Python path explicitly for CI
        export PYTHONPATH="$GITHUB_WORKSPACE:$PYTHONPATH"
        echo "PYTHONPATH: $PYTHONPATH"
        
        # Run with detailed output
        cd $GITHUB_WORKSPACE
        echo "Running from: $(pwd)"
        
        # Execute with full traceback
        python3 -u tools/auto_study_engine/test_quiz.py 2>&1 | tee test_output.log
        
        EXIT_CODE=$?
        echo "Script exit code: $EXIT_CODE"
        
        echo "=== üìä RESULTS ==="
        if [ -f "test_output.log" ]; then
          echo "Last 20 lines of output:"
          tail -n 20 test_output.log
        fi
        
        if [ $EXIT_CODE -ne 0 ]; then
          echo "‚ùå Script failed with exit code: $EXIT_CODE"
          exit $EXIT_CODE
        fi

    - name: Verify flashcard generation
      run: |
        echo "=== ‚úÖ VERIFICATION ==="
        if [ -f "data/mi_deck.json" ]; then
          echo "üéâ SUCCESS: mi_deck.json generated!"
          echo "üìä Size: $(wc -c < data/mi_deck.json) bytes"
          echo "üìÑ Content preview:"
          head -n 10 data/mi_deck.json
          echo "..."
        else
          echo "‚ùå CRITICAL ERROR: mi_deck.json was not generated!"
          echo "üìÅ Data directory contents:"
          ls -la data/ 2>/dev/null || echo "Data directory does not exist"
          echo "üìÅ Current directory contents:"
          ls -la
          exit 1
        fi

    - name: Commit and push results
      if: success()
      run: |
        echo "=== üì¶ COMMITTING RESULTS ==="
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        
        # Add the generated file
        git add data/mi_deck.json
        
        # Check if there are changes to commit
        if git diff --cached --quiet; then
          echo "‚ö†Ô∏è No changes to commit"
        else
          git commit -m "ü§ñ Auto-generate flashcards from code [skip ci]"
          git push
          echo "‚úÖ Changes committed and pushed"
        fi